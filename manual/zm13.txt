
	    ＭＥＡＳＵＲＥ１３
　　 　　　   ワークエリア


　ここでは、演奏トラックワークとその他の

ワークの内容についての解説を行います。

ＺＭＵＳＩＣ支援ツールを制作する時などに

役立ちます。










１３．１．  演奏トラックワーク


１３．１．１．  演奏トラックワークの解説を読むにあたって


・演奏トラックのワークの解説は
   ワーク名(ワークサイズ)  ワークオフセット
   ｛ワークの説明｝
  の書式で記述されている。ワークサイズは
   (.B)     バイト
   (.W)     ワード(２バイト)
   (.L)     ロングワード(４バイト)
  とする。
・同時に使用されることがないと保証されているワーク・アドレスは、重複して
  ２つ以上のワークが設定されていることがある(例えば1/8モード・ピッチ・
  モジュレーションと波形メモリによるピッチ・モジュレーションは同時に
  使用できないため、関連ワークは重複するオフセットアドレスに設定されている)。
・解説文中では以下の略号が用いられている。
  ＰＭ	ピッチ・モジュレーション
  ＡＭ  アンプリチュード・モジュレーション

・具体的なワークへのアクセス法はリスト１、リスト２のようにして行う。

				リスト１
┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃Z_MUSIC macro   func    *ドライバへのファンクションコール・マクロ   ┃
┃        moveq.l func,d1                                             ┃
┃        trap    #3                                                  ┃
┃        endm                                                        ┃
┃                                                                    ┃
┃        moveq.l #n,d2   *1≦n≦80:トラック番号                      ┃
┃        Z_MUSIC #$3c    *a0:トラックnの演奏トラックワークの         ┃
┃                        *先頭アドレス                               ┃
┃                                                                    ┃
┃*アクセス例                                                         ┃
┃        move.w  p_gate_time(a0),d0    *トラックnのある瞬間の        ┃
┃                                      *ゲートタイムを得る           ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

				リスト２
┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃Z_MUSIC macro   func    *ドライバへのファンクションコール・マクロ   ┃
┃        moveq.l func,d1                                             ┃
┃        trap    #3                                                  ┃
┃        endm                                                        ┃
┃                                                                    ┃
┃        moveq.l #1,d2   *トラック番号＝1                            ┃
┃        Z_MUSIC #$3c    *a0:トラック１の演奏トラックワークの        ┃
┃                        *先頭アドレス                               ┃
┃        move.l  a0,seq_wk_tbl *ベースアドレスとなるのでこれを格納   ┃
┃                                                                    ┃
┃      *トラック12のワーク先頭アドレスを求める時                     ┃
┃      movea.l seq_wk_tbl(pc),a0  *ベースアドレス取り出し            ┃
┃      moveq.l #11,d0             *トラック番号12(内部表現では11)    ┃
┃      lsl.w   #8,d0              *256倍                             ┃
┃      adda.w  d0,a0              *a0:トラック12のワーク先頭アドレス ┃
┃*アクセス例                                                         ┃
┃      move.w  p_gate_time(a0),d0 *トラックnのある瞬間の             ┃
┃                                 *ゲートタイムを得る                ┃
┃                                                                    ┃
┃seq_wk_tbl:   ds.l    1                                             ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛


１３．１．２．  演奏トラックワークの解説


p_on_count(.W)          $00
  現在発音中の音符の音長カウンタ(ステップタイム)。定められたテンポに従って
－1されていく。0になった時点でＺＭＵＳＩＣは次の音符を演奏しにいく。

p_gate_time(.W)         $02
  現在発音中の音符の発音長カウンタ(ゲートタイム)。定められたテンポに従って
－1されていく。0になった時点でＺＭＵＳＩＣはキーオフ処理を行う。

p_data_pointer(.L)      $04
  その時点のＺＭＤコマンドポインタ。ステップタイムが0になるたびに、
そのコマンド長分、増加していく。

p_fo_spd(.B)            $08
  フェードイン／アウトのスピードの絶対値。1≦p_fo_spd≦85。

p_ch(.B)                $09
  そのトラックがアサインされている絶対チャンネル。0≦p_ch≦25。
ＰＣＭ８独立チャンネルモードにおけるＡＤＰＣＭ拡張チャンネル番号については
後述のp_extra_ch(.B)を参照。

p_not_empty(.B)         $0a
  そのトラックの生死。
  －1:死亡
    0:演奏中
    1:演奏終了
  $7f:同期待ち中
  $99:演奏停止中(m_stop時)
  $EE:同期待ち停止中(m_stop時)

p_amod_step(.B)         $0b
  ディレイモード・ＡＭ(拡張ＡＲＣＣ)の波形生成用・整数増分。

p_mstep_tbl(.W)         $0c～$1b
  1/8モード・ＰＭ(拡張ＰＭ)用波形生成用・整数増分。(×8)

p_wvpm_loop(.L)         $0c
  ＰＭ(拡張ＰＭ)用・波形メモリループ開始アドレス。

p_wvpm_lpmd(.W)         $10
  ＰＭ(拡張ＰＭ)用・波形メモリループモード。(－1,0,＋1)

p_altp_flg(.B)          $12
  ＰＭ(拡張ＰＭ)用・波形メモリ反復モードフラグ。(0:順行中、1:逆行中)

p_fo_mode(.B)           $1c
  現在のフェードモード。( －1:フェードアウト
			  ＋1:フェードイン
			  $47:ファンクション$47/$4C実行中)

p_pgm(.B)               $1d
  現在の音色番号。(0～199)

p_pan(.B)               $1e
  現在のパンポット。(0～3)

p_vol(.B)               $1f
  現在の音量。(127最小～0最大)

p_mrvs_tbl(.B)          $20～$27
  1/8モード・ＰＭ(拡張ＰＭ)用波形生成用・補正値。(×8)

p_wvpm_point(.L)        $20
  ＰＭ(拡張ＰＭ)用・波形メモリ・ポインタ。

p_wvpm_end(.L)          $24
  ＰＭ(拡張ＰＭ)用・波形メモリ・終了アドレス。

p_sp_tie(.W)            $28
  ＦＭ音源互換タイ・モード(@J1)においてスラーを行った時の
２つの音の音程の差を格納してある。
例
  c&e  では683×4＝2732がここに格納される。

p_om(.B)                $28
  ＦＭ音源音色パラメータのＯＭの値。(&b0000～&b1111)

p_sync(.B)              $29
  ＦＭ音源音色パラメータのＳＹＮＣの値。(0,1)

p_af(.B)                $2a
  ＦＭ音源音色パラメータのＡＦの値。

p_se_mode(.B)           $2b
  そのトラックが現在効果音モードかどうか。
  $ff:normal
  $00:se mode
  $01:masking mode(FNC $44 or $4B)

p_pmod_tbl(.W)          $2c～$3b
  1/8モード・ＰＭ(拡張ＰＭ)の振幅値。(×8)
(-32768～32767)

p_total(.L)             $3c
  その時点までのステップタイムの合計。ファンクション$19
または、ファンクション$43を実行後のみ意味を持つ。

p_fo_lvl(.B)            $40
  フェーダーの出力割合。(MIN)0～128(MAX･NORMAL)

p_note(.B)              $42～$49
  現在発音中のノート一覧。(×8)

p_extra_ch(.B)          $4a
  ＰＣＭ８独立チャンネルモード時のＡＤＰＣＭ拡張チャンネル番号。(0～7)

p_aftc_n(.B)            $4b
  アフタータッチ・シーケンスのポインタ。(0～7)

p_bend_rng_f(.W)        $4c
  オート・ベンドのベンド幅(ＦＭ音源トラック専用)。
  半音＝64で表される相対表現値。(-768～768)

p_bend_rng_m(.W)        $4e
  オート・ベンドのベンド幅(ＭＩＤＩトラック専用)。
  半音≒683で表される相対表現値。(-8192～8191)

p_detune_f(.W)          $50
  ディチューン(ＦＭ音源トラック専用)。(-768～768)

p_detune_m(.W)          $52
  ディチューン(ＭＩＤＩトラック専用)。(-8192～8191)

p_port_dly(.W)          $54
  ポルタメント・ディレイ。(0～32767)

p_bend_dly(.W)          $56
  ベンド・ディレイ。(0～32767)

p_port_work(.B)         $58
  ポルタメント用補正値ワーク。

p_port_rvs(.B)          $59
  ポルタメント用補正値。

p_port_work2(.W)        $5a
  ポルタメント／オート・ベンドにおける現在のピッチベンド値。
  ＦＭ音源トラックでは半音＝64、ＭＩＤＩトラックでは半音≒683とする。

p_amod_tbl(.B)          $5c～$63
  1/8モード・ＡＭの振幅値。(×8)
(-128～127)

p_arcc_tbl(.B)          $5c～$63
  1/8モード・ＡＲＣＣ(拡張ＡＲＣＣ)の振幅値。(×8)
(-128～127)

p_arvs_tbl(.B)          $64～$6b
  1/8モード・ＡＭ(拡張ＡＲＣＣ)用波形生成用・補正値。(×8)

p_wvam_point(.L)        $64
  ＡＭ(拡張ＡＲＣＣ)用・波形メモリ・ポインタ。

p_wvam_end(.L)          $68
  ＡＭ(拡張ＡＲＣＣ)用・波形メモリ・終了アドレス。

p_pmod_work4(.W)        $6c
  ＰＭ(拡張ＰＭ)用スピードワーク。

p_port_flg(.W)          $6e
  ポルタメント実行中かどうか。
	   0:off
  －1 or ＋1:補正する方向(on)

p_bend_flg(.W)          $70
  オート・ベンド実行中かどうか。
	   0:off
  －1 or ＋1:補正する方向(on)

p_aftc_tbl(.B)          $72～$79
  アフタータッチ・シーケンス値。(×8)
(0～127,負数は省略値)

p_aftc_dly(.W)          $7a
  アフタータッチ・シーケンス用  音長の1/8カウント。

p_aftc_work(.W)         $7c
  アフタータッチ・シーケンス用  音長の1/8カウントワーク。

p_astep_tbl(.B)         $7e～$85
  1/8モード・ＡＭ(拡張ＡＲＣＣ)用波形生成用・整数増分。(×8)

p_wvam_loop(.L)         $7e
  ＡＭ(拡張ＡＲＣＣ)用・波形メモリループ開始アドレス。

p_wvam_lpmd(.W)         $82
  ＡＭ(拡張ＡＲＣＣ)用・波形メモリループモード。(－1,0,＋1)

p_alta_flg(.B)          $84
  ＡＭ(拡張ＡＲＣＣ)用・波形メモリ反復モードフラグ。(0:順行中、1:逆行中)

p_pmod_step2(.W)        $86
  ＰＭ(拡張ＰＭ)用波形生成用・整数増分(使い捨て)。

p_pmod_work(.W)         $88
  ＰＭ(拡張ＰＭ)用ディレイワーク。

p_pmod_work2(.W)        $8a
  ＰＭ(拡張ＰＭ)用  現在の音程。
・ＦＭ音源トラックでは半音＝64
・ＭＩＤＩトラックでは拡張モード１では半音＝64
		      拡張モード２では半音≒683とする。

p_pmod_work3(.B)        $8c
  ＰＭ(拡張ＰＭ)用波形生成用・補正値ワーク。

p_pmod_n(.B)            $8d
  1/8モード・ＰＭ(拡張ＰＭ)用ポインタ。(0～7)

p_sync_wk(.B)           $8e
  トラック同期コマンド用ワーク。
  $00:同期信号受信
  $ff:同期待ち状態

p_rpt_last?(.B)         $8f
  |:～:|の繰り返しコマンドにおいて、繰り返しが最後かどうか。(bit＝1:last)
  bit0:多重ループ深い
  bit1:     ↑
   :	    ｜
   :        ↓
  bit7:多重ループ浅い

p_@b_range(.B)          $90
  ピッチベンドレンジ。(0～127)

p_arcc(.B)              $91
  ＭＩＤＩトラック:ＡＲＣＣ(拡張ＡＲＣＣ)で制御するコントロールチェンジ番号(0～127)。
  ＦＭ音源トラック:ＡＭでどのオペレータに対してモジュレーション操作をするか。
		   bit＝1:操作対象オペレータ
		   bit＝0～3:オペレータ1～4

p_pmod_flg(.W)          $92
  現在ＰＭ(拡張ＰＭ)が実行中かどうか。
・ＦＭ音源トラックのＰＭ、ＭＩＤＩトラックの拡張ＰＭではワードサイズ
	   0:off
  －1 or ＋1:補正する方向(on)
・ＭＩＤＩトラックの通常ＰＭではバイトサイズ
  	   0:off
       0以外:on

p_pmod_sw(.B)           $94
  ＰＭ(拡張ＰＭ)のスイッチ。
・ＦＭ音源トラックのＰＭ、ＭＩＤＩトラックの拡張ＰＭ
  	   0:off
  －1 or ＋1:補正する方向(on)
・ＭＩＤＩトラックの通常ＰＭ
   	   0:off
       0以外:on

p_amod_sw(.B)           $95
  ＡＭのスイッチ。
 	   0:off
  －1 or ＋1:補正する方向(on)

p_arcc_sw(.B)           $95
  ＡＲＣＣ(拡張ＡＲＣＣ)のスイッチ。
・通常ＡＲＣＣ
	   0:off
       0以外:on
・拡張ＡＲＣＣ
	   0:off
  －1 or ＋1:補正する方向(on)

p_bend_sw(.B)           $96
  オート・ベンドのスイッチ。
	 　0:off
  －1 or ＋1:補正する方向(on)

p_aftc_flg(.B)          $97
  現在アフタータッチ・シーケンスを実行中か。
	  0:off
      0以外:on

p_md_flg(.B)            $98
  汎用ワーク。
  bit0 ピッチ・ベンドをリセットするかどうか
       (ＭＩＤＩトラック専用 0:no 1:yes)
  bit1 ピッチ・モジュレーションをリセットするかどうか
       (ＭＩＤＩトラック専用 0:no 1:yes)
  bit2 ＡＲＣＣ(拡張ＡＲＣＣをリセットするかどうか
       (ＭＩＤＩトラック専用 0:no 1:yes)
  bit3 ＭＩＤＩのタイ／スラー・モード
       (ＭＩＤＩトラック専用 0:normal 1:extended mode)
  bit4 ＰＭ(拡張ＰＭ)の波形のリセットを行うかどうか
       (0:行う 1:行わない)
  bit5 ＡＭ(拡張ＡＲＣＣ)の波形のリセットを行うかどうか
       (0:行う 1:行わない)
  bit6 ＰＭ(拡張ＰＭ)の波形のキーオンとの同期非同期のモード
       (0:同期 1:非同期)
  bit7 ＡＭ(拡張ＡＲＣＣ)の波形のキーオンとの同期非同期のモード
       (0:同期 1:非同期)

p_waon_flg(.B)          $99
  現在発音中の音は和音かそれとも単音か。($00:単音 $ff:和音)

p_pmod_dly(.W)          $9a
  ＰＭ(拡張ＰＭ)用ディレイ。(0～65534)

p_amod_dly(.W)          $9c
  ＡＭ用ディレイ。(0～65534)

p_arcc_dly(.W)          $9c
  ＡＲＣＣ(拡張ＡＲＣＣ)用ディレイ。(0～65534)

p_port_step(.W)         $9e
  ポルタメント／オート・ベンド用  音程整数増分、
  ＦＭ音源トラックでは半音＝64、ＭＩＤＩトラックでは半音≒683とする。

p_bank_msb(.B)		$a0
  ＭＩＤＩ音色バリエーション上位バイト(0～127)

p_bank_lsb(.B)		$a1
  ＭＩＤＩ音色バリエーション下位バイト(0～127)

p_effect1(.B)		$a2
  ＭＩＤＩ汎用エフェクト１(0～127)

p_effect3(.B)		$a3
  ＭＩＤＩ汎用エフェクト３(0～127)

p_ol1(.B)               $a0
  ＦＭ音源音色パラメータのオペレータ１のトータル・レベル(アウトプット・レベル)。

p_ol2(.B)               $a1
  ＦＭ音源音色パラメータのオペレータ２のトータル・レベル(アウトプット・レベル)。

p_ol3(.B)               $a2
  ＦＭ音源音色パラメータのオペレータ３のトータル・レベル(アウトプット・レベル)。

p_ol4(.B)               $a3
  ＦＭ音源音色パラメータのオペレータ４のトータル・レベル(アウトプット・レベル)。

p_d6_last(.B)           $a4
  拡張ＡＲＣＣにおいて前回送信したコントロールチェンジ値を保存しておくワーク。

p_cf(.B)                $a4
  ＦＭ音源の４つのオペレータのうちどのオペレータがキャリアかを示している。
  bit＝1:carrier
  bit＝0～3:オペレータ1～4

p_amod_step2(.B)        $a5
  ＡＭ(拡張ＡＲＣＣ)用波形生成用・整数増分ワーク(使い捨て)。

p_pb_add(.B)            $a6
  bit0:休符の時ベンド後のピッチを保存するか。(0:しない 1:する)
  bit1:休符の時ピッチを保存するか。(0:しない 1:する)

p_vset_flg(.B)          $a7
  キーオン前に音量をリセットするか。(0:しない 0以外:する)

p_arcc_rst(.B)          $a8
  ＡＲＣＣ(拡張ＡＲＣＣ)終了時の初期化値。

p_arcc_def(.B)          $a9
  ＡＲＣＣ(拡張ＡＲＣＣ)開始時の基準値。

p_coda_ptr(.L)          $aa
  [coda]のあるアドレス。

p_pointer(.L)           $ae
  [segno]のあるアドレス。

p_do_loop_ptr(.L)       $b2
  [do]のあるアドレス。

p_pmod_work5(.W)        $b6
  1/8モード・ＰＭ(拡張ＰＭ)用  音長の1/8カウント。

p_pmod_work6(.W)        $b8
  1/8モード・ＰＭ(拡張ＰＭ)用  音長の1/8カウントワーク。

p_amod_flg(.B)          $ba
  現在ＡＭが実行中かどうか。
	 　0:off
  －1 or ＋1:補正する方向(on)

p_arcc_flg(.B)          $ba
  現在ＡＲＣＣ(拡張ＡＲＣＣ)が実行中かどうか。
・通常ＡＲＣＣ
	   0:off
       0以外:on
・拡張ＡＲＣＣ
	 　0:off
  －1 or ＋1:補正する方向(on)

p_aftc_sw(.B)           $bb
  アフタータッチ・シーケンスのスイッチ。($00:off $00以外:on)

p_dumper(.B)            $bc
  ダンパー。($00＝off $00以外＝on)

p_tie_flg(.B)           $bd
  前の音符にタイ／スラーの指定があったか。(0:なかった 0以外:あった)

p_pmod_dpt(.W)          $be
  ディレイモード・ＰＭ(拡張ＰＭ)の振幅値。(1/8モード時は0になる)

p_seq_flag(.B)          $c0
  bit0:[d.c.]処理をしたことがあるか。(0:ない 1:ある)
  bit1:[fine]処理をすべきかどうか。(0:すべきでない 1:すべきである)
  bit2:[coda]を以前に設定したことがあるか。(0:ない 1:ある)
  bit3:[segno]が今までにあるかないか。(0:ない 1:ある)
  bit4:[d.s.]処理をしたことがあるか。(0:ない 1:ある)
  bit5:reserved。
  bit6:key off bit。(キーオフ処理をするたびに、このビットが1になる)
  bit7:key on bit。(キーオン処理をするたびに、このビットが1になる)

p_do_loop_flag(.B)      $c1
  [do]が以前に設定されているか。($00:されていない $01～:現在の繰り返し回数)

p_pmod_spd(.W)          $c2
  ＰＭ(拡張ＰＭ)の波長の1/4カウント。(1～32767)

p_amod_spd(.W)          $c4
  ＡＭ(拡張ＡＲＣＣ)の波長の1/4カウント。(1～32767)

p_total_olp(.L)         $c6
  [do]～[loop]外のステップタイムの合計。ファンクション$19
  または、ファンクション$43を実行後のみ意味を持つ。

p_pmod_step(.W)         $ca
  ディレイモード・ＰＭ(拡張ＰＭ)の波形生成用・整数増分。

p_tie_pmod(.B)          $cc
  タイ／スラーの途中でＰＭ(拡張ＰＭ)関係のパラメータチェンジが
　行われたかどうか。($00:行われなかった $00以外:行われた)

p_tie_bend(.B)          $cd
  タイ／スラーの途中でオート・ベンド関係のパラメータチェンジが
　行われたかどうかン。($00:行われなかった $00以外:行われた)

p_tie_amod(.B)          $ce
  タイ／スラーの途中でＡＭ関係のパラメータチェンジが
　行われたかどうか。($00:行われなかった $00以外:行われた)

p_tie_arcc(.B)          $ce
  タイ／スラーの途中でＡＲＣＣ(拡張ＡＲＣＣ)関係のパラメータチェンジが
　行われたかどうか。($00:行われなかった $00以外:行われた)

p_tie_aftc(.B)          $cf
  タイ／スラーの途中でアフタータッチ・シーケンス関係のパラメータチェンジが
　行われたかどうか。($00:行われなかった $00以外:行われた)

p_pan2(.B)              $d0
  パンポット。(L   M   R)
  	      (0～64～127)

p_non_off(.B)           $d1
  キーオフ無しモードかどうか。($00:通常モード  $00以外:キーオフ無しモード)

p_frq(.B)               $d2
  ＡＤＰＣＭの再生周波数。(0～6)
  (ただし5,6はＰＣＭ８独立チャンネルモード時のみ有効)

p_velo(.B)              $d3
  ベロシティ。(0～127)

p_amod_work4(.W)        $d4
  ＡＭ(拡張ＡＲＣＣ)の波長の1/4カウントワーク。

p_pmod_rvs(.B)          $d6
  ディレイモード・ＰＭ(拡張ＰＭ)用補正値。

p_waon_dly(.B)          $d7
  和音用ディレイ値。(0～255)

p_waon_work(.B)         $d8
  和音用ディレイワーク。

p_waon_num(.B)          $d9
  和音において何番目のノートをキーオンするか。(0～7)($ff:全ノートキーオン終了)

p_note_last(.B)         $d9
  単音で発音したノートのノート番号の一時退避ワーク。

p_rpt_cnt(.B)           $da～$e1
  その時点での繰り返し回数。($00は空きワーク 1～255:繰り返し回数)
  $da:多重ループ深い
  $db:      ↑
   :	    ｜
   :        ↓
  $e1:多重ループ浅い

p_maker(.B)             $e2
  そのトラックが操作している楽器のメーカーＩＤ。
  ＠Ｉコマンドの第１パラメータに相当。

p_device(.B)            $e3
  そのトラックが操作している楽器のデバイスＩＤ。
  ＠Ｉコマンドの第２パラメータに相当。

p_module(.B)            $e4
  そのトラックが操作している楽器のモデルＩＤ。
  ＠Ｉコマンドの第３パラメータに相当。

p_last_aft(.B)          $e5
  前回アフタータッチ・シーケンスで出力されたアフタータッチ値。

p_amod_work(.W)         $e6
  ＡＭ用ディレイワーク。

p_arcc_work(.W)         $e6
  ＡＲＣＣ(拡張ＡＲＣＣ)用ディレイワーク。

p_amod_work2(.B)        $e8
  ＡＭ用  現在の音量。(0～127)

p_arcc_work2(.B)        $e8
  ＡＲＣＣ(拡張ＡＲＣＣ)用  現在のコントロール値。(0～127)

p_amod_work3(.B)        $e9
  ＡＭ(拡張ＡＲＣＣ)用波形生成用・補正値ワーク。

p_amod_work7(.B)        $ea
  ＡＭ(拡張ＡＲＣＣ)用  ノコギリ波生成用ワーク。
  (一周期終了後の、波形の開始値の記憶)

p_amod_n(.B)            $eb
  1/8モード・ＡＭ用ポインタ。(0～7)

p_arcc_n(.B)            $eb
  1/8モード・ＡＲＣＣ(拡張ＡＲＣＣ)用ポインタ。(0～7)

p_arcc_work5(.W)        $ec
  1/8モード・ＡＭ用  音長の1/8カウント。

p_amod_work5(.W)        $ec
  1/8モード・ＡＲＣＣ(拡張ＡＲＣＣ)用  音長の1/8カウント。

p_arcc_work6(.W)        $ee
  1/8モード・ＡＭ用  音長の1/8カウントワーク。

p_amod_work6(.W)        $ee
  1/8モード・ＡＲＣＣ(拡張ＡＲＣＣ)用  音長の1/8カウントワーク。

p_pmod_wf(.B)           $f0
  ＰＭ(拡張ＰＭ)の波形形状。
  －31～－8:ユーザー波形番号
	  0:ノコギリ波
	  1:矩形波
	  2:三角波
	  3:ノコギリ波シングル

p_amod_dpt(.B)          $f1
  ディレイモード・ＡＭ(拡張ＡＲＣＣ)の振幅値。(1/8モード時は0になる)
(-128～127)

p_amod_wf(.B)           $f2
  ＡＭ(拡張ＡＲＣＣ)の波形形状。
  －31～－8:ユーザー波形番号
	  0:ノコギリ波
	  1:矩形波
	  2:三角波
	  3:ノコギリ波シングル

p_dmp_n(.B)             $f3
  ＦＭ音源トラック用ダンパー処理ワーク。
  p_ch＋p_dmp_nしたチャンネルで次回の発音を行う。(0～7)

p_pmod_omt(.B)          $f4
  1/8モード・ＰＭ(拡張ＰＭ)用  パラメータ省略ビットパターン。
  bit＝0:省略
  bit＝1:有効
  bit0～7:第１パラメータ～第８パラメータ

p_amod_omt(.B)          $f5
  1/8モード・ＡＭ用  パラメータ省略ビットパターン。
  bit＝0:省略
  bit＝1:有効
  bit0～7:第１パラメータ～第８パラメータ

p_arcc_omt(.B)          $f5
  1/8モード・ＡＲＣＣ(拡張ＡＲＣＣ)用  パラメータ省略ビットパターン。
  bit＝0:省略
  bit＝1:有効
  bit0～7:第１パラメータ～第８パラメータ

p_pmod_mode(.B)         $f6
  拡張ＰＭのモード番号。
  －1:通常ＰＭモード
    0:半音＝64モード
    1:半音≒683モード

p_arcc_mode(.B)         $f7
  拡張ＡＲＣＣのモード番号。
  －1:通常ＡＲＣＣモード
    0:拡張ＡＲＣＣモード
 
p_pmod_chain(.B)        $f8
  1/8モード・ＰＭ(拡張ＰＭ)波形接続ワーク。
  －1:接続待機
    0:波形通常実行中
    1:強制接続

p_amod_chain(.B)        $f9
  1/8モード・ＡＭ、ＡＲＣＣ(拡張ＡＲＣＣ)波形接続ワーク。
  －1:接続待機
    0:波形通常実行中
    1:強制接続

p_jump_flg(.B)          $fa
  [!]コマンド・ステータス・ワーク。
  －1:通常演奏状態
    0:ジャンプ実行中
    1:ジャンプ終了

p_waon_mark(.B)         $fb
  主チャンネルのパラメータ変更をしたか。(0:していない  0以外:した)

p_marker(.W)            $fc
  p_marker＋0(.B):このトラックは効果音トラックか。
		 (0:通常トラック  0以外:効果音トラック)
  p_marker＋1(.B):フェーダー移動フラグ(オーバーフローするとフェーダーが動く)。

p_amod_rvs(.B)          $fe
  ディレイモード・ＡＭ、ＡＲＣＣ(拡張ＡＲＣＣ)用補正値。
  
p_ne_buff(.B)           $ff
  効果音トラックにおけるp_not_empty(.B)の一時退避ワーク。

p_user(.B)              $ff
  ユーザー汎用ワーク。


１３．１．３．  ワーク参照にあたっての注意


  ワークの不当な書き替えは、演奏に支障をきたすだけでなく、ＺＭＵＳＩＣの暴走を

引き起こす可能性もあるため、細心の注意を必要とする。また、特殊な使用目的

以外では、各ワークは読み出し専用と考え、書き替えはなるべく行わないように

すべきである。

  各ワークは、必ずしも使用されているとは限らず、条件によっては、そのワークが

持つ値は何の意味も持たない場合がある。例えばＰＭのスイッチp_pmod_sw(.B)が

ＯＦＦ(0)の場合、ＰＭ関連ワークに格納されている値は何の意味も持たない。

  また、ＭＭＬやコマンドで与えたパラメータ値とワーク内部で表現される

内部表現形式とは多少の食い違いがあるので注意すること。例えば音色番号は

ＭＭＬパラメータでは

@<音色番号:1～200>

であるが、ワーク(内部表現)では

p_pgm(.B):0～199

となっている。


１３．１．４．  ブレゼンハムのアルゴリズム(Bresenham's algorithm)について


  ＺＭＵＳＩＣではオートベンドやポルタメント、ピッチ・モジュレーションや

アンプリチュード・モジュレーションなどの波形の生成実行にブレゼンハムの

アルゴリズム(Bresenham's algorithm)を使用している。このパラメータ計算と

その実行について解説をする。

・パラメータの計算  

  図１のようなv1→v2への値変化を行いたい場合を考える。つまり、絶対カウント

st間にちょうどv1からv2へ幅yだけ変化させたいということである。

  整数増分パラメータは

	<整数増分パラメータ>＝int(y/st)	(ただしst≠0。yは正数、負数いずれも可)

そして補正パラメータは

	<補正パラメータ>＝abs(y mod st)×256/st
	<補正方向>＝sgn(y)

で求められる。

┏━━━━━━━━━━━━━┓
┃               v2         ┃
┃              ／ ↑       ┃
┃            ／   ｜       ┃
┃          ／     ｜y      ┃
┃        ／       ｜       ┃
┃      ／         ↓       ┃
┃    v1←───→          ┃
┃          st              ┃
┗━━━━━━━━━━━━━┛
	図１パラメータ


・実行

  実際の実行は

	st≠0
	v1←初期値
	rvs_wk(補正値ワーク):＝0

として、

	repeat
		v1:＝v1＋<整数増分パラメータ>
		rvs_wk:＝rvs_wk＋<補正パラメータ>
		if (Carry flag is set) then v1:＝v1＋<補正方向>
		st:＝st－1
	until st＝0

のようなアルゴリズムにより施行される。

  なお、演奏トラックワークとブレゼンハムのアルゴリズムにおけるパラメータとの

対応は

●ポルタメント
      補正値:p_port_rvs(.B)          $59
    補正方向:p_port_flg(.W)          $6e
    整数増分:p_port_step(.W)         $9e
補正値ワーク:p_port_work(.B)         $58
    計算結果:p_port_work2(.W)        $5a

●オート・ピッチベンド
      補正値:p_port_rvs(.B)          $59
    補正方向:p_bend_flg(.W)          $70
    整数増分:p_port_step(.W)         $9e
補正値ワーク:p_port_work(.B)         $58
    計算結果:p_port_work2(.W)        $5a

●ピッチ・モジュレーション

      補正値:p_pmod_rvs(.B)          $d6
    補正方向:p_pmod_flg(.W)          $92
    整数増分:p_pmod_step2(.W)        $86
補正値ワーク:p_pmod_work3(.B)        $8c
    計算結果:p_pmod_work2(.W)        $8a

●アンプリチュード・モジュレーション/拡張ＡＲＣＣ

      補正値:p_amod_rvs(.B)          $fe
    補正方向:p_amod_flg(.B)          $ba
    整数増分:p_amod_step2(.B)        $a5
補正値ワーク:p_amod_work3(.B)        $e9
    計算結果:p_amod_work2(.B)        $e8

のようになっている。また、1/8モードのピッチ・モジュレーションや、1/8モードの

アンプリチュード・モジュレーションでは整数増分と補正値が８つ分テーブルに

格納されており、随時使用される。

●1/8モード・ピッチ・モジュレーション
  補正値テーブル:p_mrvs_tbl(.B)          $20～$27
整数増分テーブル:p_mstep_tbl(.W)         $0c～$1b

●1/8モード・アンプリチュード・モジュレーション/拡張ＡＲＣＣ
  補正値テーブル:p_arvs_tbl(.B)          $64～$6b
整数増分テーブル:p_astep_tbl(.B)         $7e～$85


１３．２．  バッファ管理ワーク


  ファンクション$45でＺＭＵＳＩＣの各バッファのアドレスを知ることができる。

ここでは、これらのバッファの構造や役割について解説をする。

┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ファンクション$45  buffer_info                                        ┃
┃                                                                      ┃
┃機能:   各バッファのアドレス、サイズ、終了アドレスの情報を得る        ┃
┃                                                                      ┃
┃引数:   なし                                                          ┃
┃                                                                      ┃
┃戻り値:  0(a0)＝トラックバッファの先頭アドレス   trk_top              ┃
┃         4(a0)＝トラックバッファのサイズ         trk_buf_size         ┃
┃         8(a0)＝トラックバッファ終了アドレス     trk_buf_end          ┃
┃              ＝ＺＭＵＳＩＣの最終アドレス       (dev_end_adr)        ┃
┃        12(a0)＝ＡＤＰＣＭバッファ先頭アドレス   adpcm_buffer_top     ┃
┃        16(a0)＝ＡＤＰＣＭバッファサイズ         adpcm_buffer_size    ┃
┃        20(a0)＝ＡＤＰＣＭバッファ終了アドレス   adpcm_buffer_end     ┃
┃        24(a0)＝汎用ワークエリア先頭アドレス     adpcm_work_top       ┃
┃        28(a0)＝汎用ワークエリアサイズ           adpcm_work_size      ┃
┃        32(a0)＝汎用ワークエリア終了アドレス     adpcm_work_end       ┃
┃                                                                      ┃
┃        36(a0)＝新規に登録される                 adpcm_buffer_next    ┃
┃                ＡＤＰＣＭデータが                                    ┃
┃                格納されるアドレス                                    ┃
┃                adpcm_buffer_top≦adpcm_buffer_next≦adpcm_buffer_end ┃
┃                                                                      ┃
┃        40(a0)＝次にワークが使用される場合の     adpcm_work_now       ┃
┃                汎用ワーク使用可能開始アドレス                        ┃
┃                adpcm_work_top≦adpcm_work_now≦adpcm_work_end        ┃
┃                                                                      ┃
┃        44(a0)＝汎用ワークエリアの本当のサイズ   adpcm_work_true_size ┃
┃                                                                      ┃
┃        48(a0)＝演奏トラックワーク格納アドレス   seq_wk_tbl           ┃
┃        52(a0)＝効果音トラックワーク格納アドレス seq_wk_tbl2          ┃
┃                                                                      ┃
┃        56(a0)＝ＡＤＰＣＭデータの管理テーブル   adpcm_tbl            ┃
┃                格納アドレス                                          ┃
┃                                                                      ┃
┃        60(a0)＝波形メモリの管理テーブル         wave_tbl             ┃
┃                格納アドレス                                          ┃
┃								        ┃
┃	  64(a0)＝ＦＭ音源音色バッファのアドレス   neiro	        ┃
┃								        ┃
┃	  68(a0)＝各トラックの先頭アドレス	   trk_po_tbl		┃
┃	 	  格納テーブルアドレス(1,2,3,...80)			┃
┃									┃
┃	  72(a0)＝m_allocで確保した各トラックの	   trk_len_tbl		┃
┃		  サイズ格納アドレス(1,2,3,...80)			┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛


●トラックバッファ

  トラックバッファはＺＭＤを格納するために確保されているが、ＭＤＤ作成時に

汎用ワークとして使用されることがある。

  外部アプリケーションで確保したメモリ領域をＺＭＵＳＩＣから参照させるには

	(trk_top)＝メモリ領域の先頭アドレス
	(trk_buf_size)＝メモリ領域のサイズ
	(trk_buf_end)＝メモリ領域の最終アドレス

を設定する。


●ＡＤＰＣＭバッファ

  ＡＤＰＣＭバッファにはＺＰＤをはじめとしたＡＤＰＣＭデータが格納される。

ＡＤＰＣＭバッファのサイズが0の時はＡＤＰＣＭ関連の命令やファンクションは

使用できない。

  外部アプリケーションで確保したメモリ領域をＺＭＵＳＩＣから参照させるには

	(adpcm_buffer_top)＝メモリ領域の先頭アドレス
	(adpcm_buffer_size)＝メモリ領域のサイズ
	(adpcm_buffer_end)＝メモリ領域の最終アドレス
	(adpcm_buffer_next)＝メモリ領域の先頭アドレス

を設定する。


●汎用ワークエリア

  汎用ワークエリアは、ＡＤＰＣＭコンフィギュレーション一時退避場所としてや、

ＡＤＰＣＭデータ加工時のワークエリア、波形メモリのバッファ(ＺＭＳ時)、

ＭＤＤ作成時のワークエリアとして多目的に使用される。

  ＡＤＰＣＭコンフィギュレーション一時退避場所、波形メモリの

バッファ(ＺＭＳ時)として使用した場合は便宜上のワークサイズ(adpcm_work_size)が

伸縮する。

  外部アプリケーションで確保したメモリ領域をＺＭＵＳＩＣから参照させるには

	(adpcm_work_top)＝メモリ領域の先頭アドレス
	(adpcm_work_size)＝メモリ領域のサイズ
	(adpcm_work_end)＝メモリ領域の最終アドレス
	(adpcm_work_now)＝メモリ領域の先頭アドレス
	(adpcm_work_true_size)＝メモリ領域のサイズ

を設定する。


●演奏トラックワーク

  演奏中の各トラックのワーク。トラックは80本あり(ＺＭＳＣ．Ｘでは32本)

１本のトラックにつき256バイトのワークが割り当てられている。各ワークの

役割については１３．１．を参照のこと。

	(seq_wk_tbl)＋トラック番号(0～79)×256

で任意のトラックのワーク先頭アドレスを求めることができる。


●効果音トラックワーク

  効果音トラックの演奏トラックワーク。トラックは32本あり、役割、

ワークサイズはまったく演奏トラックワークと同等。


●ＡＤＰＣＭ管理テーブル

  各ノート番号に割り当てられたＡＤＰＣＭデータを管理するワーク。

バンク１
ノート番号０	ＡＤＰＣＭデータアドレス(.L),ＡＤＰＣＭデータサイズ(.L)
ノート番号１	ＡＤＰＣＭデータアドレス(.L),ＡＤＰＣＭデータサイズ(.L)
ノート番号２	ＡＤＰＣＭデータアドレス(.L),ＡＤＰＣＭデータサイズ(.L)
				:
				:
ノート番号127	ＡＤＰＣＭデータアドレス(.L),ＡＤＰＣＭデータサイズ(.L)

バンク２
ノート番号０	ＡＤＰＣＭデータアドレス(.L),ＡＤＰＣＭデータサイズ(.L)
ノート番号１	ＡＤＰＣＭデータアドレス(.L),ＡＤＰＣＭデータサイズ(.L)
ノート番号２	ＡＤＰＣＭデータアドレス(.L),ＡＤＰＣＭデータサイズ(.L)
				:
				:
ノート番号127	ＡＤＰＣＭデータアドレス(.L),ＡＤＰＣＭデータサイズ(.L)

バンク３
ノート番号０	ＡＤＰＣＭデータアドレス(.L),ＡＤＰＣＭデータサイズ(.L)
ノート番号１	ＡＤＰＣＭデータアドレス(.L),ＡＤＰＣＭデータサイズ(.L)
ノート番号２	ＡＤＰＣＭデータアドレス(.L),ＡＤＰＣＭデータサイズ(.L)
				:
				:
ノート番号127	ＡＤＰＣＭデータアドレス(.L),ＡＤＰＣＭデータサイズ(.L)

バンク４
ノート番号０	ＡＤＰＣＭデータアドレス(.L),ＡＤＰＣＭデータサイズ(.L)
ノート番号１	ＡＤＰＣＭデータアドレス(.L),ＡＤＰＣＭデータサイズ(.L)
ノート番号２	ＡＤＰＣＭデータアドレス(.L),ＡＤＰＣＭデータサイズ(.L)
				:
				:
ノート番号127	ＡＤＰＣＭデータアドレス(.L),ＡＤＰＣＭデータサイズ(.L)

という構成を取っている(8×128×4＝4096bytes)。

  任意のバンク番号(1～4)、ノート番号(0～127)に対応する管理ワークアドレスは

	(adpcm_tbl)＋(バンク番号－1)×128×8＋ノート番号×8

にて求めることができる。


●波形メモリ管理テーブル

  各波形番号に割り当てられた波形メモリデータ列を管理するワーク。

波形番号8  start address(.L),end address(.L),loop point(.L),loop mode(.W)
波形番号9  start address(.L),end address(.L),loop point(.L),loop mode(.W)
波形番号10 start address(.L),end address(.L),loop point(.L),loop mode(.W)
				:
				:
波形番号31 start address(.L),end address(.L),loop point(.L),loop mode(.W)

という構成を取っている(14×24＝336bytes)。アドレスとループポイントは

絶対アドレス、ループモード値は0～2で与えたものが －1,0,＋1 にパラメータシフト

されている点に注意。

  任意の波形番号に対応したワークアドレスは

	(wave_tbl)＋(波形番号－8)×14

にて求めることができる。


●ＦＭ音源音色バッファ

  ＦＭ音源の音色は１音色につき55バイトで構成されている。よって

	(neiro)＋(音色番号(1～200)－1)×55

で、任意の音色の格納アドレスを参照できる。


●各トラックの先頭アドレス

  各トラックの先頭アドレスはtrk_po_tblに格納されているアドレスから

トラック１の先頭アドレス(.L)
トラック２の先頭アドレス(.L)
トラック３の先頭アドレス(.L)
	：
	：
トラック80の先頭アドレス(.L)

のように格納されている。よって、任意のトラック番号のトラックの先頭アドレスは

	((trk_po_tbl)＋トラック番号(0～79)×4)

で求めることができる。


●各トラックの長さ

  各トラックの長さはtrk_len_tblに格納されているアドレスから

トラック１の長さ(.L)
トラック２の長さ(.L)
トラック３の長さ(.L)
	：
	：
トラック80の長さ(.L)

のように格納されている。よって任意のトラック番号のトラックの長さは

	((trk_len_tbl)＋トラック番号(0～79)×4)

で求めることができる。

  このワークの値は「ファンクション$01 m_alloc」が実行された場合のみ意味を持つ。

ＺＭＤファイルを演奏した場合はm_allocされないのでワークの値は無意味。
