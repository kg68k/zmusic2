
	    ＭＥＡＳＵＲＥ９
	 ＭＩＤＩデータを扱う


  ここではＺＭＵＳＩＣ．Ｘの機能の１つである

ＭＩＤＩ楽器の設定をファイルとしてセーブする機能に

ついて解説します。また、楽器のメモリーを操作する

エクスクルーシブメッセージについて具体的な用例を

挙げて解説します。



９．１．  ＭＩＤＩ楽器のメモリデータをファイルにセーブする


  ＺＭＵＳＩＣ．Ｘには常駐後に使用可能となるシステムファイル名'MIDI'を用いて

楽器の状態（音色や設定など）をファイルに落とす機能がある。これによって楽器の

設定状態や音色のデータをＸ６８ｋで管理することが出来る。ここではこの機能の

具体的な使用方法について述べる。

  まず、楽器側にＭＩＤＩ  ＯＵＴ端子が無くてはならない。さらに楽器側に

自分のメモリ内のデータを外部へ送信する機能が必要である。ＭＩＤＩ  ＯＵＴ端子が

あるような楽器ならば大抵は備わっている機能であるので楽器のマニュアルを参照して

みよう。大抵は「ＭＩＤＩ  データダンプ」「バルクダンプ」といった項目に

載っているはずである。

  次にＸ６８ｋのＭＩＤＩ  ＩＮ端子と楽器のＭＩＤＩ  ＯＵＴ端子を

ＭＩＤＩケーブルで接続する。

  以上の準備が大前提で話を進めていくことにする。


●コマンドラインから行う場合（その１）


	0. ドライバの常駐を確認する
	1. 楽器側のバルクダンプのメニューを出し確認する
	2. A>copy con opm を実行する
	3. (R)と入力リータン
	4. 楽器のバルクダンプを実行する
	5. [SHIFT]＋[BREAK]でコマンドに戻る
	6. 楽器のコンソールに"COMPLETED"等のメッセージを確認するまでひたすら待つ
	7. A>copy midi filename を実行する


●コマンドラインから行う場合（その２）


	0. ドライバの常駐を確認する
	1. 楽器側のバルクダンプのメニューを出し確認する
	2. A>zp-aを実行する
	3. 楽器のバルクダンプを実行する
	4. 楽器のコンソールに"COMPLETED"等のメッセージを確認するまでひたすら待つ
	5. A>zp-a filename を実行する


●ＢＡＳＩＣから行う場合


	0. ドライバの常駐を確認しmusicz.fncを組み込んだＢＡＳＩＣを立ちあげる
	1. 楽器側のバルクダンプのメニューを出し確認する
	2. m_rec()を実行する
	3. 楽器のバルクダンプを実行する
	4. 楽器のコンソールに"COMPLETED"等のメッセージを確認するまでひたすら待つ
	5. m_save("filename")を実行しセーブする



┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃                                   注意点				      ┃
┃									      ┃
┃									      ┃
┃  データの取り込み用バッファとしてトラックバッファ、文字型データへの変換の際┃
┃									      ┃
┃にワークエリアを使用します。データ取り込み中ビープ音が鳴った場合は	      ┃
┃									      ┃
┃トラックバッファやワークが不足している事を表します。データの取り込みを      ┃
┃									      ┃
┃行う時はトラックバッファ、ワークエリアともに十分に確保して		      ┃
┃									      ┃
┃ＺＭＵＳＩＣ．Ｘを常駐させるべきです。具体的には			      ┃
┃									      ┃
┃A>zmusic -t200 -w200							      ┃
┃									      ┃
┃とします(この例ではトラックバッファ、ワークエリアともに200キロバイト確保して┃
┃									      ┃
┃常駐している)。また、ビープ音が鳴った場合にデータをセーブしてもそのデータは ┃
┃									      ┃
┃信用性がありません。							      ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃                        ＭＩＤＩダンプデータについて			      ┃
┃									      ┃
┃									      ┃
┃  楽器内部のメモリーをファイルへ落とした物をＺＭＵＳＩＣシステムでは	      ┃
┃									      ┃
┃ＭＩＤＩダンプデータと呼びます。さて、このデータは16進数の文字型の	      ┃
┃									      ┃
┃データです。ですから							      ┃
┃									      ┃
┃a>ed ファイルネーム		           				      ┃
┃									      ┃
┃でエディタからエディットが可能です（ただしＭＩＤＩダンプデータの先頭につく  ┃
┃									      ┃
┃改行コードは、実は重要な意味を果たしていますので消したりしてはいけません）。┃
┃									      ┃
┃文字型にした理由はデータ中に＄１Ａを発見するとＣＯＯＫＥＤモードの	      ┃
┃									      ┃
┃デバイスドライバはファイルの最後と判断して動作を終了してしまうためです。    ┃
┃									      ┃
┃この方が簡単にエディタから読み込めて書き替えがきくし、問題はないでしょう    ┃
┃									      ┃
┃（もちろん機械語レベルの操作のためにＺＭＵＳＩＣファンクションコールでは    ┃
┃									      ┃
┃文字型でない生データのやり取りもサポートしています（MEASURE10参照）。       ┃
┃									      ┃
┃何かアプリケーションを作成する場合はそちらを使うべきです）。		      ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃			エクスクルーシブ送信後のウェイト		      ┃
┃									      ┃
┃  ＺＭＵＳＩＣ．ＸではＭＩＤＩダンプデータの送信時や、共通コマンドの実行時、┃
┃									      ┃
┃EOX(END OF EXCLUSIVE MESSAGE)$F7を送信した場合、その後、ウェイトを入れる    ┃
┃									      ┃
┃ようにプログラムされています。これは楽器側がエクスクルーシブを処理するのに  ┃
┃									      ┃
┃時間を必要とするためです。このウェイトの値はＺＭＵＳＩＣ．Ｘ常駐時の	      ┃
┃									      ┃
┃オプションスイッチ'-X'で設定することができます。			      ┃
┃									      ┃
┃　ＭＭＬの＠ＸやＸコマンドを用いてエクスクルーシブを送信した場合は(テンポの ┃
┃									      ┃
┃ずれを避けるために)EOXの送信後にウェイトを入れていません。この場合、	      ┃
┃									      ┃
┃ユーザーが休符やウェイトコマンドを挿入するなどして適度なウェイトを与えて    ┃
┃									      ┃
┃下さい。								      ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛


９．２．  ＭＩＤＩダンプデータの楽器への転送


  以上のようにして出来たファイルを、逆に楽器側へ転送する方法について述べる。


●コマンドラインから行う場合（その１）


	0. ドライバの常駐を確認する
	1. A>copy filename midi を実行する
	2. 待つ


●コマンドラインから行う場合（その２）


	0. ドライバの常駐を確認する
	1. A>zp-x filename を実行する
	2. 待つ


●ＢＡＳＩＣから行う場合


	0. ドライバの常駐を確認しmusicz.fncを組み込んだＢＡＳＩＣを立ちあげる
	1. m_trans("ファイルネーム")を実行する
	2. 待つ


●曲中に設定する時


	ＢＡＳＩＣプログラム … m_trans("ファイルネーム")命令を用いる
	ソースファイル(ＺＭＳファイル) … .midi_dump＝ファイルネーム命令を用いる


９．３．  ローランドエクスクルーシブについて


  多くのユーザーがローランドの楽器を使用していると思われるが、ここでは

そのローランド製のＭＩＤＩ楽器のエクスクルーシブについて特に解説をする。

  ＺＭＵＳＩＣ．Ｘでは'roland_exclusive'や'm_roland()'をはじめ、

ＭＭＬレベルでも'Ｘ'コマンド等が用意されており、かなり容易に楽器のメモリを

書き替える事が可能である。ここでは'roland_exclusive'命令を使って

ＣＭ３２Ｐ(あるいはＣＭ６４のＰＣＭ音源パート)のパーシャルリザーブの行い方を 

例として解説を行う。


９．３．１．  マニュアルの後ろを見てみる


  マニュアルの後ろを見てみよう。ＣＭ６４ならば33ページを開く。

まず'＊６－３'という表に注目しよう。この表の中段に

	| 00 04 | 00aa aaa | PARTIAL RESERVE (PART 1) 0-31 |
	| 00 05 | 00aa aaa | PARTIAL RESERVE (PART 2) 0-31 |
	| 00 06 | 00aa aaa | PARTIAL RESERVE (PART 3) 0-31 |
				:
				:
	| 00 09 | 00aa aaa | PARTIAL RESERVE (PART 6) 0-31 |

が見つかるはずである。これを確認したら次にこの表'＊６－３'のタイトルを見ると

	ＳＹＳＴＥＭ  ＡＲＥＡ

とある。ここで、この表の右にあるアドレスマップからこの'SYSTEM AREA'という

文字を捜す。

	52 00 00

が'SYSTEM AREA'のベース・アドレスということが分かる。つまり、表'＊６－３'の

中のパラメータを設定したい場合は、表の左に書いてあるオフセット・アドレスと

このベース・アドレスを足したアドレスに値を送れば良いことになる。この例でいくと

	52 00 00 ＋ 00 04 ＝ 52 00 04

がパーシャルリザーブのパラメータのアドレスということになる(表'＊６－３'の

タイトルの下をみると「パーシャルリザーブは６パート分を一度に送らなければ

無効です」とあるのでもちろんこれに従うこと)。

  結局、以下のようにコマンドを書けば良いことになる。

	.roland_exclusive dev,mdl {    $52,$00,$04
					2
					3
					5
					4
					3
					6}
（１パラメータ毎に改行しているが特に意味はない。$52,00,04がアドレス、
それ以降がパラメータ）

  この例ではパート1～6、それぞれ2,3,5,4,3,6声をリザーブしている。

もちろん楽器の最大同時発声数を超えてはならない。この例では2＋3＋5＋4＋3＋6＝23で

まだ31－23＝8声分の余裕がある。

  さて、今の例でdev,mdlというのが出てきたがこれは操作対象の楽器のＩＤ番号の

ことである。

  mdlはモデルＩＤと呼ばれるものでメーカーがその楽器に与えた識別番号の

ことである。ＭＴ３２/ＣＭ３２Ｌ/ＣＭ３２Ｐ/ＣＭ６４はすべて＄１６と決められている

（ＣＭ６４ならばマニュアルのp28の上部に記載されている）。

  devはデバイスＩＤと呼ばれるもので、同じ機種(あるいは同一のデバイスＩＤを

持った)楽器でもこれを変えておけば個別に操作が可能となる、ユーザーが任意に

設定可能な識別番号である。しかしＣＭ３２Ｌ/ＣＭ３２Ｐ/ＣＭ６４は＄１０に固定である。結局、

上の例は

	.roland_exclusive $10,$16 {    $52,$00,$04
					2
					3
					5
					4
					3
					6}

ということになる。

  以上の手順をまとめると、        

１) 設定したいパラメータの表を捜す
２) 表のタイトルをアドレスマップより捜す
３) 設定したいパラメータのオフセット値と２)で見付けたベースアドレスを加算する
４) ２種類のＩＤを確認してコマンドを書く

となる。


９．３．２．  その他の例


  ＣＭ３２Ｐ(あるいはＣＭ６４のＰＣＭパート)の各パートの受信ＭＩＤＩチャンネル

を設定するときは

	roland_exclusive $10,$16 {$52,$00,$0a,0,1,2,3,4,16}

のようになる。この例ではパート1～5をそれぞれチャンネル1～5へ、パート６は

ＯＦＦにしている。ＭＩＤＩチャンネルは通常1～16ということになっているが

内部処理的には0～15なので注意すること。そういうわけでパラメータの０は

ＭＩＤＩチャンネル１、パラメータの１はＭＩＤＩチャンネル２…以下同様という

ことになる。最後のパラメータの16はＭＩＤＩチャンネル17ということではなく

そのパートをミュートする(使用しない)ということを意味する。

多くのローランド系の楽器は

	ＭＩＤＩチャンネル	実際のパラメータ値
		1～16     		0～15
 		ＯＦＦ   		16

ということになっている。

  同様にしてリバーブの設定や各パートの細かい設定(リバーブのON/OFF，

キートランスポーズの設定など)も行うことができる。もちろんＢＡＳＩＣコマンドの

'm_roland()'やＭＭＬの'Ｘ'コマンドもいままで述べてきた同様な方法で行える。

  注意点としては通常1～128で使用していたものが内部処理的には0～127と   

なっていたり、－64～＋63で使用していたものが0～127シフトされて

いたりするのでパラメータの設定にはマニュアルを確認することが必要である。
